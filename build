#!/bin/bash

github_download_release_asset() {
  local owner=$1
  local repository=$2
  local tagName=$3
  local assetName=$4
  local destPath=$5

  # local query="{ \
  #   \"query\": \" \
  #     query { \
  #       repository(owner:\\\"${owner}\\\" name:\\\"${repository}\\\") { \
  #         release(tagName:\\\"${tagName}\\\") { \
  #           releaseAssets(name:\\\"${assetName}\\\" first:1) { \
  #             edges { \
  #               node { \
  #                 downloadUrl \
  #               } \
  #             } \
  #           } \
  #         } \
  #       } \
  #     } \
  #   \"} \
  # "

  local query="{ \
    \"query\": \" \
      query { \
        repository(owner:\\\"${owner}\\\" name:\\\"${repository}\\\") { \
          release(tagName:\\\"${tagName}\\\") { \
            releaseAssets(name:\\\"${assetName}\\\" first:1) { \
              edges { \
                node { \
                  downloadUrl \
                } \
              } \
            } \
          } \
        } \
      } \
    \"} \
  "

  # curl -s -H "Authorization: bearer $THAT_HASH" -X POST -d "${query}" https://api.github.com/graphql |
  # jq -r ".data.repository.release.releaseAssets.edges[0].node.downloadUrl" |
  # xargs wget -q --show-progress -P ${destPath}
  pushd ${destPath} > /dev/null
  wget -q --show-progress https://github.com/${owner}/${repository}/releases/download/${tagName}/${assetName}
  popd > /dev/null
}

download_from_url() {
  local url=$1
  local destPath=$2

  wget -q --show-progress -O "${destPath}" ${url}
}

process_external_download() {
  local url=$1
  local filename=$2
  local destPath=$3
  local destFilename=${destPath}/${filename}

  echo Downloading \"${url}\" to \"${destFilename}\"

  download_from_url ${url} ${destFilename}
}

process_github_release_asset_download() {
  local owner=$1
  local repository=$2
  local assetName=$3
  local destPath=$4

  if [ $releaseType == "dev" ]; then
    tagName="latest-rc"
  fi

  if [ $releaseType == "final" ]; then
    tagName="latest"
  fi

  echo Downloading \"${owner}/${repository}@${tagName}/${assetName}\" to \"${destPath}/$assetName\"

  github_download_release_asset ${owner} ${repository} ${tagName} ${assetName} ${destPath}
}

extract() {
  local fileType=${1}
  local fileName=${2}
  echo Extracting ${fileName}
  extract_${fileType} ${fileName}
  rm -f ${fileName}
}
extract_zip() {
  unzip -qq ${1}
}

extract_tar() {
  tar -xf ${1}
}

process_build_file() {
  local buildFilePath=$1
  local source=$(cat ${buildFilePath} | jq -r ".source")
  local destinationPath=$(dirname ${buildFilePath})
  local assetFilename=""

  if [ "${source}" == "external" ]; then
    local url=$(cat ${buildFilePath} | jq -r ".url")
    assetFilename=$(cat ${buildFilePath} | jq -r ".filename")
    process_external_download ${url} ${assetFilename} ${destinationPath}

  elif [ "${source}" == "github-release-asset" ]; then
    local owner=$(cat ${buildFilePath} | jq -r ".owner")
    local repository=$(cat ${buildFilePath} | jq -r ".repository")
    assetFilename=$(cat ${buildFilePath} | jq -r ".assetName")
    process_github_release_asset_download ${owner} ${repository} ${assetFilename} ${destinationPath}
  fi

  if [[ ! -z ${assetFilename} ]]; then
    pushd ${destinationPath} > /dev/null
    case "$assetFilename" in
    *.zip)
      extract zip ${assetFilename}
      ;;
    *.tar)
      extract tar ${assetFilename}
      ;;
    esac
    echo Cleaning Up ${destinationPath}
    rm .build
    popd > /dev/null
  fi
}

clean() {
  echo "Cleaning..."

  # shopt -s globstar
  # for buildFile in ./**/.build
  # do
  #   local dirname=`dirname ${buildFile}`

  #   echo "Cleaning ${dirname}"

  #   local deleteArray=(`cat ${buildFile} | jq -c ".assetName"`)
  #   local deleteRules=`cat ${buildFile} | jq -c ".clean"`

  #   if [ ${deleteRules} != "null" ]; then
  #     deleteArray=(`cat ${buildFile} | jq ".clean[]"`)
  #   fi

  #   for file in "${deleteArray[@]}"; do
  #     rm -rf ${dirname}/${file:1:-1}
  #   done

  # done

  echo "Cleaning package"
  rm -rf dist
}

build() {
  echo "Building..."
  test -d dist || mkdir dist
  cp -r sdcard/* dist/
  shopt -s globstar
  for buildFile in dist/**/.build; do
    process_build_file ${buildFile}
  done
}

package() {
  pushd dist > /dev/null
  zip -r sdcard.zip * -x hacks/**/.build
  popd > /dev/null
}

main() {
  local target=$1

  case ${target} in
  clean)
    clean
    ;;

  dev | rc | final)
    releaseType=$1

    clean
    build
    package
    ;;

  *)
    echo "Invalid target '${1}'"
    ;;
  esac
}

main $1
